<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help100_Description" xml:space="preserve">
    <value>DltDump parses DLT Version 1 log files, originating either from a file, serial or TCP connection.</value>
  </data>
  <data name="Help200_UsageInfo" xml:space="preserve">
    <value>To run the tool execute it with the optional [options] and the mandatory &lt;input&gt;. The following command line options are available:</value>
  </data>
  <data name="Help210_SimpleUsageScheme" xml:space="preserve">
    <value>dltdump.exe {0}?</value>
  </data>
  <data name="Help210_UsageScheme" xml:space="preserve">
    <value>dltdump.exe [options] &lt;input&gt;</value>
  </data>
  <data name="Help300_Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="Help310_HelpOption" xml:space="preserve">
    <value>{0}? | {1}help
 displays this help message.</value>
  </data>
  <data name="Help315_VersionOption" xml:space="preserve">
    <value>{1}version
 displays the version of the software.</value>
  </data>
  <data name="Help320_Position" xml:space="preserve">
    <value>{1}position
  Show the offset of the stream on text output</value>
  </data>
  <data name="Help325_InputFormat" xml:space="preserve">
    <value>{1}format
  Defines the input format. This can be one of the following (by default it is automatic):</value>
  </data>
  <data name="Help325_InputFormatAuto" xml:space="preserve">
    <value>* automatic|auto - choose based on the URI, or the file name extension</value>
  </data>
  <data name="Help325_InputFormatFile" xml:space="preserve">
    <value>* file - interpret the URI as a file with a storage header</value>
  </data>
  <data name="Help325_InputFormatNetwork" xml:space="preserve">
    <value>* network|net - interpret the URI as a network stream, each packet starting with the standard header</value>
  </data>
  <data name="Help325_InputFormatSerial" xml:space="preserve">
    <value>* serial|ser - interpret the URI as a serial stream with a DLS\1 header</value>
  </data>
  <data name="Help400_Input" xml:space="preserve">
    <value>The input stream shall be the last option in the command line. Multiple files can be specified, or a single URI can be specified. The URIs supported are:</value>
  </data>
  <data name="Help405_InputFile" xml:space="preserve">
    <value>file.dlt or file:///home/user/file.dlt - read a specific file. The time stamps are read from the input file if available.</value>
  </data>
  <data name="Help410_InputTcp" xml:space="preserve">
    <value>tcp://&lt;hostname&gt;[:&lt;port&gt;] - connect to a trace server via TCP. If the port is not provided, the default of 3490 is assumed. Time stamps are taken from the local computer.</value>
  </data>
  <data name="Help800_ExitCodes" xml:space="preserve">
    <value>The exit code of the application indicates if the command run with success or there was a problem.</value>
  </data>
  <data name="Help805_Success" xml:space="preserve">
    <value>0 - The program ran successfully</value>
  </data>
  <data name="Help810_OptionError" xml:space="preserve">
    <value>1 - There was an error processing the options</value>
  </data>
  <data name="Help811_NoFilesProcessed" xml:space="preserve">
    <value>2 - None of the input files could be processed</value>
  </data>
  <data name="Help812_PartialFilesProcessed" xml:space="preserve">
    <value>3 - Not all of the files could be processed (partial error)</value>
  </data>
  <data name="Help899_UnknownError" xml:space="preserve">
    <value>255 - An unhandled exception occurred</value>
  </data>
</root>