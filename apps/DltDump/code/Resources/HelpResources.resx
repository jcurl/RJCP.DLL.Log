<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help100_Description" xml:space="preserve">
    <value>DltDump parses DLT Version 1 log files, originating either from a file, serial or TCP connection.</value>
  </data>
  <data name="Help200_UsageInfo" xml:space="preserve">
    <value>To run the tool execute it with the optional [options] and the mandatory &lt;input&gt;. The following command line options are available:</value>
  </data>
  <data name="Help210_SimpleUsageScheme" xml:space="preserve">
    <value>dltdump.exe {0}?</value>
  </data>
  <data name="Help210_UsageScheme" xml:space="preserve">
    <value>dltdump.exe [options] &lt;input&gt;</value>
  </data>
  <data name="Help300_Options" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="Help310_HelpOption" xml:space="preserve">
    <value>{0}? | {1}help
 displays this help message.</value>
  </data>
  <data name="Help315_VersionOption" xml:space="preserve">
    <value>{1}version
 displays the version of the software.</value>
  </data>
  <data name="Help320_Position" xml:space="preserve">
    <value>{1}position
  Show the offset of the stream on text output.</value>
  </data>
  <data name="Help325_InputFormat" xml:space="preserve">
    <value>{1}format{2}&lt;format&gt;
  Defines the input format. This can be one of the following (by default it is automatic):</value>
  </data>
  <data name="Help325_InputFormatAuto" xml:space="preserve">
    <value>* automatic|auto - choose based on the URI, or the file name extension.</value>
  </data>
  <data name="Help325_InputFormatFile" xml:space="preserve">
    <value>* file - interpret the URI as a file with a storage header.</value>
  </data>
  <data name="Help325_InputFormatNetwork" xml:space="preserve">
    <value>* network|net - interpret the URI as a network stream, each packet starting with the standard header.</value>
  </data>
  <data name="Help325_InputFormatSerial" xml:space="preserve">
    <value>* serial|ser - interpret the URI as a serial stream with a DLS\1 header.</value>
  </data>
  <data name="Help330_Retries" xml:space="preserve">
    <value>{1}retries{2}&lt;count&gt;
  For input URIs that need a connection (e.g. tcp), specify the number of retries when connecting. When the retries is negative, attempts go on forever. When the retries is more than zero, it tries 'n' times again. If retries are enabled, an attempt to reconnect after the stream is closed is always made until the connection attempts fails. This allows for connecting to remote targets that reset forever, and ending only if the remote target doesn't recover.</value>
  </data>
  <data name="Help335_StringSearch" xml:space="preserve">
    <value>{0}s | {1}string{2}&lt;string&gt;
  Search for lines that have the text content containing &lt;string&gt;.</value>
  </data>
  <data name="Help340_RegexSearch" xml:space="preserve">
    <value>{0}r | {1}regex{2}&lt;regex&gt;
  Search for lines that match the .NET regular expression for &lt;regex&gt;.</value>
  </data>
  <data name="Help345_IgnoreCase" xml:space="preserve">
    <value>{0}i | {1}ignorecase
  If provided, the searches are made case insensitive.</value>
  </data>
  <data name="Help350_EcuId" xml:space="preserve">
    <value>{1}ecuid{2}&lt;id1&gt;[,&lt;id2&gt;[,...]]
  Specify a list of ECU Identifiers that should match.</value>
  </data>
  <data name="Help355_AppId" xml:space="preserve">
    <value>{1}appid{2}&lt;id1&gt;[,&lt;id2&gt;[,...]]
  Specify a list of Application Identifiers that should match.</value>
  </data>
  <data name="Help360_CtxId" xml:space="preserve">
    <value>{1}ctxid{2}&lt;id1&gt;[,&lt;id2&gt;[,...]]
  Specify a list of context identifiers that should match.</value>
  </data>
  <data name="Help365_SessionId" xml:space="preserve">
    <value>{1}sessionid{2}&lt;id1&gt;[,&lt;id2&gt;[,...]]
  Specify a list of session identifiers that should match. Lines that don't have a session identifier do not match.</value>
  </data>
  <data name="Help370_DltTypes" xml:space="preserve">
    <value>{0}type{2}&lt;types&gt;
  Filter for specific message types. Types are:
  * Log: fatal,error,warn,info,debug,verbose
  * Network: ipc,can,flexray,network,ethernet.someip,user1,..,user9
  * Control: request,response,time
  * Trace: variable,functionin,functionout,state,vfb
  You can use an integer 0-254 for comparison for other values, e.g. 48 is the same as 'warn'.</value>
  </data>
  <data name="Help375_Verbose" xml:space="preserve">
    <value>{1}verbose
  Match lines that are verbose (have an extended header and the verbose bit is set).</value>
  </data>
  <data name="Help380_NonVerbose" xml:space="preserve">
    <value>{1}nonverbose
  Match lines that are nonverbose (have no extended header, or where the verbose bit is not set and is not a control message).</value>
  </data>
  <data name="Help385_Control" xml:space="preserve">
    <value>{1}control
  Match lines that are a control message (including the timing message).</value>
  </data>
  <data name="Help390_BeforeContext" xml:space="preserve">
    <value>{0}B | {1}before-context{2}&lt;lines&gt;
  On a match, print &lt;lines&gt; of text before the match.</value>
  </data>
  <data name="Help395_AfterContext" xml:space="preserve">
    <value>{0}A | {1}after-context{2}&lt;lines&gt;
  On a match, print &lt;lines&gt; of text after the match.</value>
  </data>
  <data name="Help400_OutputFileName" xml:space="preserve">
    <value>{0}o | {1}output{2}&lt;filename&gt;
  Write the output to the file specified. If not provided, write to the console. When writing text files, the {0}position argument can optionally prepend each line with the offset from the input stream. The output file name may contain substitution with %VAR%, where the name is an environment variable which will be substituted. Some special variables are allowed:</value>
  </data>
  <data name="Help401_OutputFile" xml:space="preserve">
    <value>* %FILE% - use the name of the input file</value>
  </data>
  <data name="Help402_OutputDateTime" xml:space="preserve">
    <value>* %CDATETIME% - use the local date/time of the first line</value>
  </data>
  <data name="Help403_OuputDate" xml:space="preserve">
    <value>* %CDATE% - use the local date of the first line</value>
  </data>
  <data name="Help404_OutputTime" xml:space="preserve">
    <value>* %CTIME% - use the local time of the first line</value>
  </data>
  <data name="Help410_Force" xml:space="preserve">
    <value>{0}f | {1}force
  When using {1}output, overwrite the output file if it already exists.</value>
  </data>
  <data name="Help500_Input" xml:space="preserve">
    <value>The input stream shall be the last option in the command line. Multiple files can be specified, or a single URI can be specified. The URIs supported are:</value>
  </data>
  <data name="Help505_InputFile" xml:space="preserve">
    <value>file.dlt or file:///home/user/file.dlt - read a specific file. The time stamps are read from the input file if available.</value>
  </data>
  <data name="Help510_InputTcp" xml:space="preserve">
    <value>tcp://&lt;hostname&gt;[:&lt;port&gt;] - connect to a trace server via TCP. If the port is not provided, the default of 3490 is assumed. Time stamps are taken from the local computer.</value>
  </data>
  <data name="Help515_InputSerial" xml:space="preserve">
    <value>ser:port,baud,databits,parity,stopbits[,handshake] - receive data arriving via the serial port. Time stamps are taken from the local computer. By default, it is assumed that format is serial, with {1}format{2}ser. Valid values for the handshake are xon,rts,dtr.</value>
  </data>
  <data name="Help800_ExitCodes" xml:space="preserve">
    <value>The exit code of the application indicates if the command run with success or there was a problem.</value>
  </data>
  <data name="Help805_Success" xml:space="preserve">
    <value>0 - The program ran successfully.</value>
  </data>
  <data name="Help810_OptionError" xml:space="preserve">
    <value>1 - There was an error processing the options.</value>
  </data>
  <data name="Help811_InputUnknown" xml:space="preserve">
    <value>2 - There was an error parsing the input URIs.</value>
  </data>
  <data name="Help812_NoFilesProcessed" xml:space="preserve">
    <value>3 - None of the input files could be processed.</value>
  </data>
  <data name="Help813_PartialFilesProcessed" xml:space="preserve">
    <value>4 - Not all of the files could be processed (partial error).</value>
  </data>
  <data name="Help814_OutputError" xml:space="preserve">
    <value>5 - There was a problem creating the output file.</value>
  </data>
  <data name="Help899_UnknownError" xml:space="preserve">
    <value>255 - An unhandled exception occurred.</value>
  </data>
</root>