@startuml Domain.OutputStreamFactory

'interface IDisposable

enum OutputFormat {
    Automatic
    Console
    Text
    Dlt
}

interface IOutputStreamFactory {
    Split: int
    Force: bool
    ConvertNonVerbose: bool
    InputFiles: InputFiles
    Create(fileType: OutputFormat, string outputFile): IOutputStream
}

OutputStreamFactory -d-> DltOutput : <<instantiates>>
OutputStreamFactory -d-> TextOutput : <<instantiates>>
OutputStreamFactory -d-> ConsoleOutput : <<instantiates>>

IOutputStreamFactory -u- OutputFormat

class InputFiles {
    AddProtectedFile(fileName: string)
    IsProtectedFile(fileName: string): bool
}
class OutputStreamFactory {
    Split: int
    Force: bool
    ConvertNonVerbose: bool
    InputFiles: InputFiles
    Create(fileType: OutputFormat, string outputFile): IOutputStream
}
OutputStreamFactory *-l- InputFiles
IOutputStreamFactory <|.d. OutputStreamFactory

interface IOutputStream {
    SupportsBinary: bool
    SetInput(fileName: string, inputFormat: InputFormat)
    Write(line: DltTraceLineBase)
    Write(line: DltTraceLineBase, packet: ReadOnlySpan<byte>)
    Flush()
}

'IOutputStream .r.|> IDisposable

class ConsoleOutput {
    ConsoleOutput()
    ConsoleOutput(showPosition: bool)
}
IOutputStream <|.d.. ConsoleOutput

class TextOutput {
    TextOutput(fileName: string)
    TextOutput(fileName: string, force: bool)
    TextOutput(fileName: string, split: long, force: bool)
    TextOutput(fileName: string, inputs: InputFiles, split: long, force: bool)
}
IOutputStream <|.d.. TextOutput

class DltOutput {
    DltOutput(fileName: string)
    DltOutput(fileName: string, force: bool)
    DltOutput(fileName: string, split: long, force: bool)
    DltOutput(fileName: string, inputs: InputFiles, split: long, force: bool)
    ..
    ConvertNonVerbose: bool
}
IOutputStream <|.d.. DltOutput

abstract class OutputBase {
    #OutputBase(fileName: string)
    #OutputBase(fileName: string, force: bool)
    #OutputBase(fileName: string, split: long, force: bool)
    #OutputBase(fileName: string, inputs: InputFiles, split: long, force: bool)
    ..
    -m_InputFiles: InputFiles
    +Force: bool
    +Split: int
    +Encoding: Encoding
    +AutoFlushPeriod: int
    ..
    #SetInput(fileName: string)
    #Write(timeStamp: DateTime, line: string)
    #Write(timeStamp: DateTime, buffer: ReadOnlySpan<byte>)
    #Write(timeStamp: DateTime, header: ReadOnlySpan<byte>, buffer: ReadOnlySpan<byte>)
    +Flush()
    +Dispose()
    #Dispose(disposing: bool)
}

class OutputWriter {
    Length: long
    IsOpen: bool
    Open(fileName: string, mode: FileMode)
    Write(buffer: ReadOnlySpan<byte>)
    Flush()
    Close()
    Dispose()
}
'OutputWriter .u.|> IDisposable
'OutputBase .u.|> IDisposable
OutputBase o-u- InputFiles

TextOutput -d-|> OutputBase
DltOutput -d-|> OutputBase

OutputBase *-d- OutputWriter
OutputWriter *-r- FileStream
'FileStream .u.|> IDisposable

@enduml