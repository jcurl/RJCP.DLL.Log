namespace RJCP.App.DltDump.Domain.Dlt.Pcap
{
    using System;
    using System.Collections.Generic;
    using NUnit.Framework;
    using RJCP.Diagnostics.Log;
    using RJCP.Diagnostics.Log.Dlt;
    using RJCP.Diagnostics.Log.Dlt.Args;

    [TestFixture]
    public class PacketDecoderTest
    {
        private readonly DateTime Time1 = new DateTime(2022, 4, 24, 17, 2, 54, DateTimeKind.Utc).AddMilliseconds(580);

        [Test]
        public void UnknownLinkType()
        {
            Assert.That(() => {
                _ = new PacketDecoder(LinkTypes.LINKTYPE_NULL);
            }, Throws.TypeOf<UnknownPcapFileFormatException>());
        }

        [Test]
        public void DecodeEthernetPacket()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,                         // UDP Header
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(1));
                Assert.That(lines[0].Text, Is.EqualTo("DLT Argument test string.."));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
            }
        }

        [Test]
        public void DecodeEthernetPacketVlan73()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x81, 0x00, 0x00, 0x49, 0x08, 0x00,                                     // 802.1q, IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,                         // UDP Header
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(1));
                Assert.That(lines[0].Text, Is.EqualTo("DLT Argument test string.."));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
            }
        }

        [Test]
        public void DecodeLinuxSllPacket()
        {
            byte[] packet = {
                0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // SLL Header
                0x00, 0x00,
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,                         // UDP Header
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_LINUX_SLL)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(1));
                Assert.That(lines[0].Text, Is.EqualTo("DLT Argument test string.."));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
            }
        }

        [Test]
        public void DecodeLinuxSllPacket73()
        {
            byte[] packet = {
                0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // SLL Header
                0x00, 0x00,
                0x81, 0x00, 0x00, 0x49, 0x08, 0x00,                                     // 802.1q, IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,                         // UDP Header
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_LINUX_SLL)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(1));
                Assert.That(lines[0].Text, Is.EqualTo("DLT Argument test string.."));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
            }
        }

        [Test]
        public void DecodeMultipleDltInPacket()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x92, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x2A, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x7E, 0x69, 0x15,                         // UDP Header
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00,
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(2));
                Assert.That(lines[0].Text, Is.EqualTo("DLT Argument test string.."));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
                Assert.That(lines[1].Text, Is.EqualTo("DLT Argument test string 2"));
                Assert.That(lines[1].TimeStamp, Is.EqualTo(Time1));
            }
        }

        [Test]
        public void IgnoreArpEthernetPacket()
        {
            // Don't decode anything that is not IPv4.

            byte[] packet = {
                0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x25, 0x36, 0x66, 0x74, 0x66, // DstMac, SrcMac
                0x08, 0x06,
                0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x25, 0x36, 0x66, // ARP
                0x74, 0x66, 0xC0, 0xA8, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xC0, 0xA8, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void IgnoreArpDllPacket()
        {
            // Don't decode anything that is not IPv4.

            byte[] packet = {
                0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // SLL Header
                0x00, 0x00,
                0x08, 0x06,
                0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0x00, 0x25, 0x36, 0x66, // ARP
                0x74, 0x66, 0xC0, 0xA8, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0xC0, 0xA8, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_LINUX_SLL)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void MinimalDltNonVerbosePacketEthernet()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x24, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x98, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x10, 0xE7, 0x74,                         // UDP Header
                0x20, 0x01, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00                          // DLT
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(1));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
                Assert.That(lines[0].Features.IsVerbose, Is.False);

                IList<IDltArg> args = ((DltTraceLine)lines[0]).Arguments;
                Assert.That(args.Count, Is.EqualTo(1));
                Assert.That(((NonVerboseDltArg)args[0]).MessageId, Is.EqualTo(1));
            }
        }

        [Test]
        public void MinimalDltNonVerbosePacketSll()
        {
            byte[] packet = {
                0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // SLL Header
                0x00, 0x00,
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x24, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x98, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x10, 0xE7, 0x74,                         // UDP Header
                0x20, 0x01, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00                          // DLT
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_LINUX_SLL)) {
                IList<DltTraceLineBase> lines = new List<DltTraceLineBase>(
                    packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(1));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
                Assert.That(lines[0].Features.IsVerbose, Is.False);

                IList<IDltArg> args = ((DltTraceLine)lines[0]).Arguments;
                Assert.That(args.Count, Is.EqualTo(1));
                Assert.That(((NonVerboseDltArg)args[0]).MessageId, Is.EqualTo(1));
            }
        }

        [Test]
        public void TooSmallDltNonVerbosePacketEthernet()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x24, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x98, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x10, 0xE7, 0x74,                         // UDP Header
                0x20, 0x01, 0x00, 0x04                                                  // DLT, incomplete
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void TooSmallDltNonVerbosePacketSll()
        {
            byte[] packet = {
                0x00, 0x04, 0x00, 0x01, 0x00, 0x06, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // SLL Header
                0x00, 0x00,
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x24, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x98, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x10, 0xE7, 0x74,                         // UDP Header
                0x20, 0x01, 0x00, 0x04,                                                 // DLT
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_LINUX_SLL)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void DecodeEthernetPacketPort65000()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0xFD, 0xE8, 0x00, 0x43, 0xB5, 0xCF,                         // UDP Header, dest 65000
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void CutFrame()
        {
            // Same data from test DecodeEthernetPacket
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,                         // UDP Header
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            // We should not end up with any crashes.
            for (int packetLen = 0; packetLen < packet.Length - 1; packetLen++) {
                using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                    IEnumerable<DltTraceLineBase> lines =
                        packetDecoder.DecodePacket(packet.AsSpan(0, packetLen), DateTime.UtcNow, 20);
                    Assert.That(lines, Is.Empty);
                }
            }
        }

        [Test]
        public void NotUdpProtocol()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x12, 0xA3, 0x65, // IPv4 Header, Proto=0x12 (not UDP)
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E,
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void NotIPv4Version()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x55, 0x00, 0x00, 0x57, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x65, // IPv5 header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x43, 0xB5, 0xCF,
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E,
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IEnumerable<DltTraceLineBase> lines = packetDecoder.DecodePacket(packet, DateTime.UtcNow, 20);
                Assert.That(lines, Is.Empty);
            }
        }

        [Test]
        public void DecodeMultipleDltInPacketFirstInvalidSkipped()
        {
            byte[] packet = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x92, 0x3A, 0x25, 0x00, 0x00, 0x01, 0x11, 0xA3, 0x2A, // IPv4 Header
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x7E, 0x69, 0x15,                         // UDP Header
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // DLT
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x20, 0x32, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                IList<DltTraceLineBase> lines =
                    new List<DltTraceLineBase>(packetDecoder.DecodePacket(packet, Time1, 20));
                Assert.That(lines.Count, Is.EqualTo(2));
                Assert.That(lines[0].Text, Is.EqualTo("Skipped: 59 bytes; Reason: Invalid packet standard header"));
                Assert.That(lines[0].TimeStamp, Is.EqualTo(Time1));
                Assert.That(lines[1].Text, Is.EqualTo("DLT Argument test string 2"));
                Assert.That(lines[1].TimeStamp, Is.EqualTo(Time1));
            }
        }

        [Test]
        public void IgnoreFragmentedPacket()
        {
            // The first frame is a fragmented IP packet
            byte[] frame1 = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x5C, 0x3A, 0x25, 0x20, 0x00, 0x01, 0x11, 0x83, 0x60, // IPv4 Header (id=0x3a25, MF=1)
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x0D, 0xA2, 0x0D, 0xA2, 0x00, 0x7E, 0x69, 0x15,                         // UDP Header (length=126)
                0x3D, 0x0B, 0x00, 0x3B, 0x45, 0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, // DLT
                0x00, 0x01, 0x54, 0x4A, 0x41, 0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54,
                0x58, 0x31, 0x00, 0x02, 0x00, 0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20,
                0x41, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73,
                0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2E, 0x2E, 0x00,
                0x3D, 0x0B, 0x00, 0x3B, 0x45                                            // DLT
            };

            // The second frame is a continuation from above
            byte[] frame2 = {
                0x10, 0xDF, 0x23, 0x41, 0xE4, 0xC2, 0x74, 0xE7, 0xB1, 0x14, 0x44, 0x5E, // DstMac, SrcMac
                0x08, 0x00,                                                             // IPv4 Proto
                0x45, 0x00, 0x00, 0x4A, 0x3A, 0x25, 0x00, 0x09, 0x01, 0x11, 0xA3, 0x69, // IPv4 Header (id=0x3a25, MF=0, Offset=9*8=72)
                0xC0, 0xA8, 0x01, 0x01, 0xEF, 0xFF, 0x2A, 0x63,
                0x43, 0x55, 0x31, 0x00, 0x00, 0x03, 0x8E, 0x00, 0x01, 0x54, 0x4A, 0x41, // DLT (ctd.)
                0x01, 0x41, 0x50, 0x50, 0x31, 0x43, 0x54, 0x58, 0x31, 0x00, 0x02, 0x00,
                0x00, 0x1B, 0x00, 0x44, 0x4C, 0x54, 0x20, 0x41, 0x72, 0x67, 0x75, 0x6D,
                0x65, 0x6E, 0x74, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x73, 0x74, 0x72,
                0x69, 0x6E, 0x67, 0x20, 0x32, 0x00
            };

            using (PacketDecoder packetDecoder = new PacketDecoder(LinkTypes.LINKTYPE_ETHERNET)) {
                Assert.That(packetDecoder.DecodePacket(frame1, Time1, 40), Is.Empty);
                Assert.That(packetDecoder.DecodePacket(frame2, Time1, 162), Is.Empty);
            }
        }
    }
}
