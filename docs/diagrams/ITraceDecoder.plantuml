@startuml ITraceDecoder
hide empty members

interface ITraceReader<T : ITraceLine> {
    GetLineAsync() : T
}

interface ITraceDecoderFactory<T : ITraceLine> {
    Create() : ITraceDecoder<T>
}

interface ITraceReaderFactory<T : ITraceLine> {
    CreateAsync(stream: Stream) : ITraceReader<T>
    CreateAsync(fileName: string) : ITraceReader<T>
}

interface ITraceDecoder<T : ITraceLine> {
    Decode(buffer: ReadOnlySpan<byte>, position: long) : IEnumerable<T>
    Flush() : IEnumerable<T>
}

class TraceReaderFactory<T : ITraceLine> {
    #.ctor(decoderFactory: ITraceDecoderFactory<T>)
    +CreateAsync(stream: Stream) : ITraceReader<T>
    +CreateAsync(fileName: string) : ITraceReader<T>
}

class TraceReader<T : ITraceLine> {
    TraceReader(stream: Stream, decoder: ITraceDecoder<T>)
    ..
    GetLineAsync() : T
}

ITraceReaderFactory <|.. TraceReaderFactory

TraceReader .u.|> ITraceReader
TraceReaderFactory -r-> TraceReader : <<returns>>\nT > MyTraceLine

class MyTraceReaderFactory { }
note bottom
    User instantiates this class
    to get the <b>TraceReader</b>.
end note

class MyTraceDecoderFactory {
    +Create(): ITraceDecoder<MyTraceLine>
}

MyTraceDecoderFactory .u.|> ITraceDecoderFactory : T > MyTraceLine
MyTraceDecoderFactory -r-> MyTraceDecoder : <<instantiates>>

class MyTraceDecoder {
    Decode(buffer, position) : IEnumerable<MyTraceLine>
}

MyTraceDecoder .u.|> ITraceDecoder : T > MyTraceLine
MyTraceDecoder -u-o TraceReader

TraceReaderFactory <|-- MyTraceReaderFactory : T > MyTraceLine
MyTraceReaderFactory *-r- MyTraceDecoderFactory
TraceReaderFactory o- MyTraceDecoderFactory
@enduml