namespace RJCP.Diagnostics.Log.Dlt.Args
{
    using System.Text;
    using NUnit.Framework;

    [TestFixture]
    public class BinaryIntDltArgTest
    {
        [TestCase(0, 1, "0b0000 0000")]
        [TestCase(0, 2, "0b0000 0000 0000 0000")]
        [TestCase(0, 4, "0b0000 0000 0000 0000 0000 0000 0000 0000")]
        [TestCase(0, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000")]
        [TestCase(100, 1, "0b0110 0100")]
        [TestCase(100, 2, "0b0000 0000 0110 0100")]
        [TestCase(100, 4, "0b0000 0000 0000 0000 0000 0000 0110 0100")]
        [TestCase(100, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0110 0100")]
        [TestCase(uint.MaxValue, 1, "0b1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(uint.MaxValue, 2, "0b1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(uint.MaxValue, 4, "0b1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(uint.MaxValue, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(ushort.MaxValue, 1, "0b1111 1111 1111 1111")]
        [TestCase(ushort.MaxValue, 2, "0b1111 1111 1111 1111")]
        [TestCase(ushort.MaxValue, 4, "0b0000 0000 0000 0000 1111 1111 1111 1111")]
        [TestCase(ushort.MaxValue, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1111 1111 1111 1111")]
        [TestCase(byte.MaxValue, 1, "0b1111 1111")]
        [TestCase(byte.MaxValue, 2, "0b0000 0000 1111 1111")]
        [TestCase(byte.MaxValue, 4, "0b0000 0000 0000 0000 0000 0000 1111 1111")]
        [TestCase(byte.MaxValue, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1111 1111")]
        [TestCase(unchecked((long)ulong.MaxValue), 1, "0b1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)ulong.MaxValue), 2, "0b1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)ulong.MaxValue), 4, "0b1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)ulong.MaxValue), 8, "0b1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)0x8FFFFFFFFFFFFFFFUL), 1, "0b1000 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)0x8FFFFFFFFFFFFFFFUL), 2, "0b1000 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)0x8FFFFFFFFFFFFFFFUL), 4, "0b1000 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(unchecked((long)0x8FFFFFFFFFFFFFFFUL), 8, "0b1000 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFFFFFFFFFL, 1, "0b0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFFFFFFFFFL, 2, "0b0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFFFFFFFFFL, 4, "0b0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFFFFFFFFFL, 8, "0b0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x8FFFFFFFL, 1, "0b1000 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x8FFFFFFFL, 2, "0b1000 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x8FFFFFFFL, 4, "0b1000 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x8FFFFFFFL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 1000 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFL, 1, "0b0111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFL, 2, "0b0111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFL, 4, "0b0111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x7FFFFFFFL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0111 1111 1111 1111 1111 1111 1111 1111")]
        [TestCase(0x8FFFL, 1, "0b1000 1111 1111 1111")]
        [TestCase(0x8FFFL, 2, "0b1000 1111 1111 1111")]
        [TestCase(0x8FFFL, 4, "0b0000 0000 0000 0000 1000 1111 1111 1111")]
        [TestCase(0x8FFFL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1000 1111 1111 1111")]
        [TestCase(0x7FFFL, 1, "0b0111 1111 1111 1111")]
        [TestCase(0x7FFFL, 2, "0b0111 1111 1111 1111")]
        [TestCase(0x7FFFL, 4, "0b0000 0000 0000 0000 0111 1111 1111 1111")]
        [TestCase(0x7FFFL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0111 1111 1111 1111")]
        [TestCase(0x8FL, 1, "0b1000 1111")]
        [TestCase(0x8FL, 2, "0b0000 0000 1000 1111")]
        [TestCase(0x8FL, 4, "0b0000 0000 0000 0000 0000 0000 1000 1111")]
        [TestCase(0x8FL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1000 1111")]
        [TestCase(0x7FL, 1, "0b0111 1111")]
        [TestCase(0x7FL, 2, "0b0000 0000 0111 1111")]
        [TestCase(0x7FL, 4, "0b0000 0000 0000 0000 0000 0000 0111 1111")]
        [TestCase(0x7FL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0111 1111")]
        [TestCase(0xFFL, 1, "0b1111 1111")]
        [TestCase(0xFFL, 2, "0b0000 0000 1111 1111")]
        [TestCase(0xFFL, 4, "0b0000 0000 0000 0000 0000 0000 1111 1111")]
        [TestCase(0xFFL, 8, "0b0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 1111 1111")]
        public void LongBinaryValue(long value, int length, string output)
        {
            BinaryIntDltArg hexArg = new(value, length);
            Assert.That(hexArg.ToString(), Is.EqualTo(output));
            Assert.That(hexArg.Data, Is.EqualTo(value));

            StringBuilder sb = new();
            Assert.That(hexArg.Append(sb).ToString(), Is.EqualTo(output));
        }
    }
}
