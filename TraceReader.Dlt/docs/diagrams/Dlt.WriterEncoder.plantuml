@startuml DLT.WriterEncoder
interface IDisposable

interface ITraceEncoder<TLine:ITraceLine> {
    +Encode(buffer: Span<byte>, line: TLine): Result<int>
}
IDisposable <|.d. ITraceEncoder

interface ITraceEncoderFactory<TLine:ITraceLine> {
    +Create(): ITraceEncoder<TLine>
}

class DltTraceEncoderFactory<TLine:DltTraceLineBase> {
    +Create() : ITraceEncoder<DltTraceLineBase>
}
ITraceEncoderFactory <|.d. DltTraceEncoderFactory : TLine -> DltTraceLineBase

class DltTraceEncoder<TLine:DltTraceLineBase> {
    +Encode(buffer: Span<byte>, line: DltTraceLineBase): Result<int>
}
ITraceEncoder <|.d. DltTraceEncoder : TLine -> DltTraceLineBase
DltTraceEncoderFactory -r-> DltTraceEncoder : <<creates>>

interface IDltEncoder<TLine:DltTraceLineBase> {
   +Encode(buffer: Span<byte>, line: TLine): Result<int>
}

class VerboseDltEncoder<TLine:DltTraceLine> {
    +Encode(buffer: Span<byte>, line: DltTraceLine): Result<int>
}
IDltEncoder <|.d. VerboseDltEncoder : TLine -> DltTraceLine

interface IArgEncoder {
    +Encode(buffer: Span<byte>, bool verbose, bool msbf, arg: IDltArg): Result<int>
}

class DltArgEncoder {
    +Encode(buffer: Span<byte>, bool verbose, bool msbf, arg: IDltArg): Result<int>
}
IArgEncoder <|.d. DltArgEncoder
VerboseDltEncoder *-r- DltArgEncoder

class BoolArgEncoder
together {
    class BinaryIntArgEncoder
    class HexIntArgEncoder
    class SignedIntArgEncoder
    class UnsignedIntArgEncoder
}
together {
    class Float32ArgEncoder
    class Float64ArgEncoder
}
class StringArgEncoder
class RawArgEncoder
class NonVerboseArgEncoder
class UnknownVerboseArgEncoder
IArgEncoder <|..d. BinaryIntArgEncoder
IArgEncoder <|..d. HexIntArgEncoder
IArgEncoder <|..d. SignedIntArgEncoder
IArgEncoder <|..d. UnsignedIntArgEncoder
IArgEncoder <|..d. BoolArgEncoder
IArgEncoder <|..d. Float32ArgEncoder
IArgEncoder <|..d. Float64ArgEncoder
IArgEncoder <|..d. RawArgEncoder
IArgEncoder <|..d. StringArgEncoder
IArgEncoder <|..d. NonVerboseArgEncoder
IArgEncoder <|..d. UnknownVerboseArgEncoder

DltArgEncoder *-d- BinaryIntArgEncoder
DltArgEncoder *-d- HexIntArgEncoder
DltArgEncoder *-d- SignedIntArgEncoder
DltArgEncoder *-d- UnsignedIntArgEncoder
DltArgEncoder *-d- BoolArgEncoder
DltArgEncoder *-d- Float32ArgEncoder
DltArgEncoder *-d- Float64ArgEncoder
DltArgEncoder *-d- RawArgEncoder
DltArgEncoder *-d- StringArgEncoder
DltArgEncoder *-d- NonVerboseArgEncoder
DltArgEncoder *-d- UnknownVerboseArgEncoder

DltTraceEncoder *-d- IDltEncoder

BinaryIntArgEncoder -d-> BinaryIntDltArg : <<encodes>>
HexIntArgEncoder -d-> HexIntDltArg : <<encodes>>
SignedIntArgEncoder -d-> SignedIntDltArg : <<encodes>>
UnsignedIntArgEncoder -d-> UnsignedIntDltArg : <<encodes>>
BoolArgEncoder -d-> BoolDltArg : <<encodes>>
Float32ArgEncoder -d-> Float32DltArg : <<encodes>>
Float64ArgEncoder -d-> Float64DltArg : <<encodes>>
StringArgEncoder -d-> StringDltArg : <<encodes>>
RawArgEncoder -d-> RawDltArg : <<encodes>>
NonVerboseArgEncoder -d-> RawDltArg : <<encodes\nverbose>>
NonVerboseArgEncoder -d-> NonVerboseDltArg : <<encodes\nnonverbose>>
NonVerboseArgEncoder -d-> UnknownVerboseDltArg : <<encodes>>
UnknownVerboseArgEncoder -d-> UnknownVerboseDltArg : <<encodes>>
@enduml